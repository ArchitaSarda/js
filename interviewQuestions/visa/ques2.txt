// Given an array arr[], the task is to find the elements of a contiguous subarray of numbers that has the largest sum.

// Examples:

// Input: arr = [-2, -3, 4, -1, -2, 1, 5, -3]
// Output: [4, -1, -2, 1, 5]
// Explanation: 
// In the above input the maximum contiguous subarray sum is 7 and the elements of the subarray are [4, -1, -2, 1, 5]

// Input: arr = [-2, -5, 6, -2, -3, 1, 5, -6] 
// Output: [6, -2, -3, 1, 5] 
// Explanation: 
// In the above input the maximum contiguous subarray sum is 7 and the elements 
// of the subarray are [6, -2, -3, 1, 5]


// -2
// -2 + -3, -2 + -3 + 4, 


const maxSum = arr => {
    let sum = 0, left = 0, right = 0;
    //sum would be initialised by -Infinity
    for(let i=0;i<arr.length;i++) {
        let tempSum = arr[i];
        for(let j=i+1;j<arr.length;j++) {
            tempSum += arr[j];

            if(tempSum > sum) {
                sum = tempSum;
                left=i;
                right=j;
            }
        }
    }
    const output = [];
    for(let i=left;i<=right;i++) {
        output.push(arr[i])
    }
    return output;
}

const arr1 = [-2, -3, 4, -1, -2, 1, 5, -3]
const arr2 =  [-2, -5, 6, -2, -3, 1, 5, -6]
const arr3 = [-2,-1,-3,-4]

console.log(maxSum(arr1))
console.log(maxSum(arr2))
console.log(maxSum(arr3))